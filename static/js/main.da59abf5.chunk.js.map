{"version":3,"sources":["sound.wav","Components/Time.js","Components/Infos.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Time","props","react_default","a","createElement","className","id","concat","time","min","sec","Infos","session","break","sessionInitialized","twentyToMilli","fiveToMilli","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","getTime","workTime","interval","breakTimeDisplayed","getTimeDisplayed","workTimeDisplayed","isOn","bind","assertThisInitialized","startTimer","resetTimer","updateDisplay","switchToNextPhase","incrementWorkSession","incrementBreakSession","decrementWorkSession","decrementBreakSession","clearInterval","setState","setInterval","audio","document","getElementById","pause","currentTime","total","play","catch","err","console","log","Math","floor","Components_Time","onClick","index_es","icon","faPlay","faRedo","faAngleUp","faAngleDown","Components_Infos","src","Sound","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da59abf5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sound.f613734e.wav\";","import React, { Component } from 'react';\r\n\r\nconst Time = (props) => {\r\n    return (\r\n      <div className=\"timer\">\r\n        <h1 className=\"time-left\" id=\"time-left\">{`${props.time.min}:${props.time.sec}`}</h1>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Time;\r\n","import React, { Component } from 'react';\r\n\r\nconst Infos = (props) => {\r\n    return (\r\n      <div className=\"info\">\r\n        <p className=\"session\" id=\"session-label\">Session Length: <span id=\"session-length\">{`${props.session.min}`}</span></p>\r\n        <p className=\"break\" id=\"break-label\">Break Length: <span id=\"break-length\">{`${props.break.min}`}</span></p>\r\n        <p id=\"timer-label\">{props.sessionInitialized ? \"ðŸ“š Work time ! ðŸ“š\" : \"ðŸ˜Ž Take a break ! ðŸ˜Ž\"}</p>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Infos;\r\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlay, faRedo, faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons'\n\nimport './App.css';\n\nimport Time from './Components/Time'\nimport Infos from './Components/Infos'\nimport Sound from './sound.wav'\n\nlet twentyToMilli = 1500000;\nlet fiveToMilli = 300000;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      time: this.getTime(twentyToMilli),\n      workTime: false,\n      interval: null,\n      breakTimeDisplayed : this.getTimeDisplayed(fiveToMilli),\n      workTimeDisplayed: this.getTimeDisplayed(twentyToMilli),\n      isOn: false\n    }\n\n    this.getTime = this.getTime.bind(this);\n    this.getTimeDisplayed = this.getTimeDisplayed.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n    this.updateDisplay = this.updateDisplay.bind(this);\n    this.switchToNextPhase = this.switchToNextPhase.bind(this);\n    this.incrementWorkSession = this.incrementWorkSession.bind(this);\n    this.incrementBreakSession = this.incrementBreakSession.bind(this);\n    this.decrementWorkSession = this.decrementWorkSession.bind(this);\n    this.decrementBreakSession = this.decrementBreakSession.bind(this);\n  }\n\n  startTimer() {\n    if(!this.state.isOn) {\n      this.setState({ \n        interval: setInterval(this.updateDisplay, 1000),\n        isOn: true,\n        workTime: true\n       })\n    } else {\n      clearInterval(this.state.interval);\n      this.setState({ interval: null, isOn: false })\n    }\n  }\n\n  resetTimer() {\n    clearInterval(this.state.interval);\n    twentyToMilli = 1500000;\n    fiveToMilli = 300000;\n    const audio = document.getElementById('beep');\n    audio.pause();\n    audio.currentTime = 0;\n    this.setState({\n      time: this.getTime(twentyToMilli),\n      breakTimeDisplayed : this.getTimeDisplayed(fiveToMilli),\n      workTimeDisplayed: this.getTimeDisplayed(twentyToMilli),\n      workTime: false,\n      interval: null,\n      isOn: false\n    })\n  }\n\n\n  updateDisplay() {\n    if (this.state.time.total > 0) {\n      let time = this.getTime(this.state.time.total - 1000);\n      this.setState({ time })\n    } else {\n      this.switchToNextPhase();\n    }\n  }\n\n  switchToNextPhase() {\n    this.state.workTime ? this.setState({ time: this.getTime(fiveToMilli), workTime: false }) : this.setState({ time: this.getTime(twentyToMilli), workTime: true })\n    const audio = document.getElementById('beep');\n    audio.currentTime = 0;\n    audio.play().catch(err => {console.log(err);});\n  }\n\n  getTime(time) {\n    let min = Math.floor(time / 1000 / 60 % 60) < 10 ? '0' + Math.floor(time / 1000 / 60 % 60) : Math.floor(time / 1000 / 60 % 60) ;\n    let sec = Math.floor(time / 1000 % 60) < 10 ? '0' + Math.floor(time / 1000 % 60) : Math.floor(time / 1000 % 60);\n    let total = time;\n    if (time === 3600000) {min = 60; sec = 0;} \n    return {total, min, sec};\n  }\n\n  getTimeDisplayed(time) {\n    let min = Math.floor(time / 1000 / 60 % 60);\n    if (time === 3600000) {min = 60;} \n    return {min};\n  }\n\n  incrementWorkSession() {\n    if (twentyToMilli < 3600000) { twentyToMilli = twentyToMilli + 60000 }\n    this.setState({\n      time: this.getTime(twentyToMilli),\n      workTimeDisplayed: this.getTimeDisplayed(twentyToMilli)\n    })\n  }\n\n  incrementBreakSession() {\n    if (fiveToMilli < 3600000) { fiveToMilli = fiveToMilli + 60000 }\n    this.setState({\n      breakTimeDisplayed: this.getTimeDisplayed(fiveToMilli)\n    })\n  }\n\n  decrementWorkSession() {\n    if (twentyToMilli > 60000) { twentyToMilli = twentyToMilli - 60000 }\n    this.setState({\n      time: this.getTime(twentyToMilli),\n      workTimeDisplayed: this.getTimeDisplayed(twentyToMilli)\n    })\n  }\n\n  decrementBreakSession() {\n    if (fiveToMilli > 60000) { fiveToMilli = fiveToMilli - 60000 }\n    this.setState({\n      breakTimeDisplayed: this.getTimeDisplayed(fiveToMilli)\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Time time={this.state.time} />\n        <div className=\"controls\">\n          <div className=\"controls--core\">\n            <button onClick={this.startTimer} id=\"start_stop\"><FontAwesomeIcon icon={faPlay} /></button>\n            <button onClick={this.resetTimer} id=\"reset\"><FontAwesomeIcon icon={faRedo} /></button>\n          </div>\n          <div className=\"controls--custom\">\n            <div className=\"controls--work\">\n              <button onClick={this.incrementWorkSession} id=\"session-increment\"><FontAwesomeIcon icon={faAngleUp} />  Work Session</button>\n              <button onClick={this.decrementWorkSession} id=\"session-decrement\"><FontAwesomeIcon icon={faAngleDown} />  Work Session</button>\n            </div>\n            <div className=\"controls--break\">\n              <button onClick={this.incrementBreakSession} id=\"break-increment\"><FontAwesomeIcon icon={faAngleUp} />  Break Session</button>\n              <button onClick={this.decrementBreakSession} id=\"break-decrement\"><FontAwesomeIcon icon={faAngleDown} />  Break Session</button>\n            </div>\n          </div>\n          <Infos           \n            break={this.state.breakTimeDisplayed} \n            session={this.state.workTimeDisplayed}\n            sessionInitialized={this.state.workTime} />\n          <audio id=\"beep\" src={Sound}></audio>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}